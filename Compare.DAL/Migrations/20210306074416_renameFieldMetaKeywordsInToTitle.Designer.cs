// <auto-generated />
using System;
using Compare.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Compare.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210306074416_renameFieldMetaKeywordsInToTitle")]
    partial class renameFieldMetaKeywordsInToTitle
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Compare.DAL.Models.Advertising.Advert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AdvertPlaceStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublish")
                        .HasColumnType("boolean");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<int>("PagePlaceStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Adverts");
                });

            modelBuilder.Entity("Compare.DAL.Models.Advertising.AdvertTranslate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AdvertId")
                        .HasColumnType("integer");

                    b.Property<string>("LanguageCulture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.ToTable("AdvertTranslates");
                });

            modelBuilder.Entity("Compare.DAL.Models.Attribute.ProductAttributeTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.HasKey("Id");

                    b.ToTable("ProductAttributeTemplates");
                });

            modelBuilder.Entity("Compare.DAL.Models.Attribute.ProductAttributeTemplateAndProductOption", b =>
                {
                    b.Property<int>("ProductAttributeTemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductOptionId")
                        .HasColumnType("integer");

                    b.HasKey("ProductAttributeTemplateId", "ProductOptionId");

                    b.HasIndex("ProductOptionId");

                    b.ToTable("ProductAttributeTemplateAndProductOptions");
                });

            modelBuilder.Entity("Compare.DAL.Models.Attribute.ProductAttributeTemplateTranslate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("LanguageCulture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductAttributeTemplateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeTemplateId");

                    b.ToTable("ProductAttributeTemplateTranslates");
                });

            modelBuilder.Entity("Compare.DAL.Models.Attribute.ProductOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.HasKey("Id");

                    b.ToTable("ProductOptions");
                });

            modelBuilder.Entity("Compare.DAL.Models.Attribute.ProductOptionTranslate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("LanguageCulture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductOptionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductOptionId");

                    b.ToTable("ProductOptionTranslates");
                });

            modelBuilder.Entity("Compare.DAL.Models.Catalog.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Compare.DAL.Models.Catalog.CategoryAndProduct", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CategoriesAndProducts");
                });

            modelBuilder.Entity("Compare.DAL.Models.Catalog.CategoryTranslate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("LanguageCulture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTranslates");
                });

            modelBuilder.Entity("Compare.DAL.Models.Catalog.Manufacture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Manufactures");
                });

            modelBuilder.Entity("Compare.DAL.Models.Catalog.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int>("ManufactureId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductDetailAttributeId")
                        .HasColumnType("integer");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ManufactureId");

                    b.HasIndex("ProductDetailAttributeId")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Compare.DAL.Models.Catalog.ProductDetailAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ProductDetailAttributes");
                });

            modelBuilder.Entity("Compare.DAL.Models.Catalog.ProductDetailAttributeTranslate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("LanguageCulture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductDetailAttributeId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetailAttributeId");

                    b.ToTable("ProductDetailAttributeTranslates");
                });

            modelBuilder.Entity("Compare.DAL.Models.Catalog.ProductMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductMedias");
                });

            modelBuilder.Entity("Compare.DAL.Models.Catalog.ProductTranslate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("FullDescription")
                        .HasColumnType("text");

                    b.Property<string>("LanguageCulture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTranslates");
                });

            modelBuilder.Entity("Compare.DAL.Models.Company.CategoryAndOrganizationApi", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationApiId")
                        .HasColumnType("integer");

                    b.HasKey("CategoryId", "OrganizationApiId");

                    b.HasIndex("OrganizationApiId");

                    b.ToTable("CategoriesAndOrganizationApis");
                });

            modelBuilder.Entity("Compare.DAL.Models.Company.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Site")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Compare.DAL.Models.Company.OrganizationApi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("UrlApi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationApis");
                });

            modelBuilder.Entity("Compare.DAL.Models.Company.OrganizationProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("InStock")
                        .HasColumnType("boolean");

                    b.Property<bool>("OfficialDealer")
                        .HasColumnType("boolean");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrganizationProducts");
                });

            modelBuilder.Entity("Compare.DAL.Models.Company.OrganizationSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationSubscriptions");
                });

            modelBuilder.Entity("Compare.DAL.Models.Configuration.Language", b =>
                {
                    b.Property<string>("Culture")
                        .HasColumnType("text");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.HasKey("Culture");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Compare.DAL.Models.Home.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublish")
                        .HasColumnType("boolean");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("Compare.DAL.Models.Home.BannerTranslate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("BannerId")
                        .HasColumnType("integer");

                    b.Property<string>("LanguageCulture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.ToTable("BannerTranslates");
                });

            modelBuilder.Entity("Compare.DAL.Models.Home.Panel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPublish")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Panels");
                });

            modelBuilder.Entity("Compare.DAL.Models.Home.PanelAndProduct", b =>
                {
                    b.Property<int>("PanelId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("PanelId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("PanelAndProducts");
                });

            modelBuilder.Entity("Compare.DAL.Models.Home.PanelTranslate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("LanguageCulture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PanelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PanelId");

                    b.ToTable("PanelTranslates");
                });

            modelBuilder.Entity("Compare.DAL.Models.Info.Information", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int?>("InformationStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Informations");
                });

            modelBuilder.Entity("Compare.DAL.Models.Info.InformationTranslate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("InformationId")
                        .HasColumnType("integer");

                    b.Property<string>("LanguageCulture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InformationId");

                    b.ToTable("InformationTranslates");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Compare.DAL.Models.User.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasIndex("OrganizationId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Compare.DAL.Models.Advertising.Advert", b =>
                {
                    b.HasOne("Compare.DAL.Models.Catalog.Category", "Category")
                        .WithMany("Adverts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Compare.DAL.Models.Advertising.AdvertTranslate", b =>
                {
                    b.HasOne("Compare.DAL.Models.Advertising.Advert", "Advert")
                        .WithMany("AdvertTranslates")
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advert");
                });

            modelBuilder.Entity("Compare.DAL.Models.Attribute.ProductAttributeTemplateAndProductOption", b =>
                {
                    b.HasOne("Compare.DAL.Models.Attribute.ProductAttributeTemplate", "ProductAttributeTemplate")
                        .WithMany("ProductAttributeTemplateAndProductOptions")
                        .HasForeignKey("ProductAttributeTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compare.DAL.Models.Attribute.ProductOption", "ProductOption")
                        .WithMany("ProductAttributeTemplateAndProductOptions")
                        .HasForeignKey("ProductOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductAttributeTemplate");

                    b.Navigation("ProductOption");
                });

            modelBuilder.Entity("Compare.DAL.Models.Attribute.ProductAttributeTemplateTranslate", b =>
                {
                    b.HasOne("Compare.DAL.Models.Attribute.ProductAttributeTemplate", "ProductAttributeTemplate")
                        .WithMany("ProductAttributeTemplateTranslates")
                        .HasForeignKey("ProductAttributeTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductAttributeTemplate");
                });

            modelBuilder.Entity("Compare.DAL.Models.Attribute.ProductOptionTranslate", b =>
                {
                    b.HasOne("Compare.DAL.Models.Attribute.ProductOption", "ProductOption")
                        .WithMany("ProductOptionTranslates")
                        .HasForeignKey("ProductOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductOption");
                });

            modelBuilder.Entity("Compare.DAL.Models.Catalog.Category", b =>
                {
                    b.HasOne("Compare.DAL.Models.Catalog.Category", "ParentCategory")
                        .WithMany("Categories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Compare.DAL.Models.Catalog.CategoryAndProduct", b =>
                {
                    b.HasOne("Compare.DAL.Models.Catalog.Category", "Category")
                        .WithMany("CategoriesAndProducts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compare.DAL.Models.Catalog.Product", "Product")
                        .WithMany("CategoriesAndProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Compare.DAL.Models.Catalog.CategoryTranslate", b =>
                {
                    b.HasOne("Compare.DAL.Models.Catalog.Category", "Category")
                        .WithMany("CategoryTranslates")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Compare.DAL.Models.Catalog.Product", b =>
                {
                    b.HasOne("Compare.DAL.Models.Catalog.Manufacture", "Manufacture")
                        .WithMany("Products")
                        .HasForeignKey("ManufactureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Compare.DAL.Models.Catalog.ProductDetailAttribute", "ProductDetailAttribute")
                        .WithOne("Product")
                        .HasForeignKey("Compare.DAL.Models.Catalog.Product", "ProductDetailAttributeId");

                    b.Navigation("Manufacture");

                    b.Navigation("ProductDetailAttribute");
                });

            modelBuilder.Entity("Compare.DAL.Models.Catalog.ProductDetailAttributeTranslate", b =>
                {
                    b.HasOne("Compare.DAL.Models.Catalog.ProductDetailAttribute", "ProductDetailAttribute")
                        .WithMany("ProductDetailAttributeTranslates")
                        .HasForeignKey("ProductDetailAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetailAttribute");
                });

            modelBuilder.Entity("Compare.DAL.Models.Catalog.ProductMedia", b =>
                {
                    b.HasOne("Compare.DAL.Models.Catalog.Product", "Product")
                        .WithMany("ProductMedias")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Compare.DAL.Models.Catalog.ProductTranslate", b =>
                {
                    b.HasOne("Compare.DAL.Models.Catalog.Product", "Product")
                        .WithMany("ProductTranslates")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Compare.DAL.Models.Company.CategoryAndOrganizationApi", b =>
                {
                    b.HasOne("Compare.DAL.Models.Catalog.Category", "Category")
                        .WithMany("CategoriesAndOrganizationApis")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compare.DAL.Models.Company.OrganizationApi", "OrganizationApi")
                        .WithMany("CategoriesAndOrganizationApis")
                        .HasForeignKey("OrganizationApiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("OrganizationApi");
                });

            modelBuilder.Entity("Compare.DAL.Models.Company.OrganizationApi", b =>
                {
                    b.HasOne("Compare.DAL.Models.Company.Organization", "Organization")
                        .WithMany("OrganizationApis")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Compare.DAL.Models.Company.OrganizationProduct", b =>
                {
                    b.HasOne("Compare.DAL.Models.Company.Organization", "Organization")
                        .WithMany("OrganizationProducts")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compare.DAL.Models.Catalog.Product", "Product")
                        .WithMany("OrganizationProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Compare.DAL.Models.Company.OrganizationSubscription", b =>
                {
                    b.HasOne("Compare.DAL.Models.Catalog.Category", "Category")
                        .WithMany("OrganizationSubscriptions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compare.DAL.Models.Company.Organization", "Organization")
                        .WithMany("OrganizationSubscriptions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Compare.DAL.Models.Home.BannerTranslate", b =>
                {
                    b.HasOne("Compare.DAL.Models.Home.Banner", "Banner")
                        .WithMany("BannerTranslates")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");
                });

            modelBuilder.Entity("Compare.DAL.Models.Home.PanelAndProduct", b =>
                {
                    b.HasOne("Compare.DAL.Models.Home.Panel", "Panel")
                        .WithMany("PanelAndProducts")
                        .HasForeignKey("PanelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compare.DAL.Models.Catalog.Product", "Product")
                        .WithMany("PanelAndProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Panel");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Compare.DAL.Models.Home.PanelTranslate", b =>
                {
                    b.HasOne("Compare.DAL.Models.Home.Panel", "Panel")
                        .WithMany("PanelTranslates")
                        .HasForeignKey("PanelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Panel");
                });

            modelBuilder.Entity("Compare.DAL.Models.Info.InformationTranslate", b =>
                {
                    b.HasOne("Compare.DAL.Models.Info.Information", "Information")
                        .WithMany("InformationTranslates")
                        .HasForeignKey("InformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Information");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Compare.DAL.Models.User.ApplicationUser", b =>
                {
                    b.HasOne("Compare.DAL.Models.Company.Organization", "Organization")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("Compare.DAL.Models.User.ApplicationUser", "OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Compare.DAL.Models.Advertising.Advert", b =>
                {
                    b.Navigation("AdvertTranslates");
                });

            modelBuilder.Entity("Compare.DAL.Models.Attribute.ProductAttributeTemplate", b =>
                {
                    b.Navigation("ProductAttributeTemplateAndProductOptions");

                    b.Navigation("ProductAttributeTemplateTranslates");
                });

            modelBuilder.Entity("Compare.DAL.Models.Attribute.ProductOption", b =>
                {
                    b.Navigation("ProductAttributeTemplateAndProductOptions");

                    b.Navigation("ProductOptionTranslates");
                });

            modelBuilder.Entity("Compare.DAL.Models.Catalog.Category", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("Categories");

                    b.Navigation("CategoriesAndOrganizationApis");

                    b.Navigation("CategoriesAndProducts");

                    b.Navigation("CategoryTranslates");

                    b.Navigation("OrganizationSubscriptions");
                });

            modelBuilder.Entity("Compare.DAL.Models.Catalog.Manufacture", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Compare.DAL.Models.Catalog.Product", b =>
                {
                    b.Navigation("CategoriesAndProducts");

                    b.Navigation("OrganizationProducts");

                    b.Navigation("PanelAndProducts");

                    b.Navigation("ProductMedias");

                    b.Navigation("ProductTranslates");
                });

            modelBuilder.Entity("Compare.DAL.Models.Catalog.ProductDetailAttribute", b =>
                {
                    b.Navigation("Product");

                    b.Navigation("ProductDetailAttributeTranslates");
                });

            modelBuilder.Entity("Compare.DAL.Models.Company.Organization", b =>
                {
                    b.Navigation("ApplicationUser");

                    b.Navigation("OrganizationApis");

                    b.Navigation("OrganizationProducts");

                    b.Navigation("OrganizationSubscriptions");
                });

            modelBuilder.Entity("Compare.DAL.Models.Company.OrganizationApi", b =>
                {
                    b.Navigation("CategoriesAndOrganizationApis");
                });

            modelBuilder.Entity("Compare.DAL.Models.Home.Banner", b =>
                {
                    b.Navigation("BannerTranslates");
                });

            modelBuilder.Entity("Compare.DAL.Models.Home.Panel", b =>
                {
                    b.Navigation("PanelAndProducts");

                    b.Navigation("PanelTranslates");
                });

            modelBuilder.Entity("Compare.DAL.Models.Info.Information", b =>
                {
                    b.Navigation("InformationTranslates");
                });
#pragma warning restore 612, 618
        }
    }
}
